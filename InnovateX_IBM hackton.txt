!pip install streamlit pyngrok langchain pandas matplotlib
%%writefile app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Predefined topics
topics = ["IBM Granite", "Machine Learning", "Large Language Models", "Cloud Computing"]

# Improved mock LLM
def generate_explanation(topic):
    explanations = {
        "IBM Granite": "IBM Granite is a family of foundation models provided by IBM through watsonx.ai. These models support natural language processing tasks like summarization, classification, and generation.",
        "Machine Learning": "Machine Learning is a method of teaching computers to learn from data without being explicitly programmed.",
        "Large Language Models": "LLMs are AI models trained on vast amounts of text data to generate human-like language responses.",
        "Cloud Computing": "Cloud computing delivers computing services over the internet, offering scalability and flexibility."
    }
    return explanations.get(topic, f"This is a simple explanation generated by AI for {topic}.")

def generate_mcqs(topic):
    mcqs = {
        "IBM Granite": """MCQs for IBM Granite:
1. What is IBM Granite used for?
    a) Image editing
    b) NLP tasks in watsonx.ai
    c) Mobile development
    d) Gaming

2. Which platform provides IBM Granite models?
    a) Azure AI
    b) Google Cloud
    c) IBM watsonx.ai
    d) AWS SageMaker

3. IBM Granite models are:
    a) Only for vision tasks
    b) Pre-trained LLMs for NLP
    c) Limited to code generation
    d) Spreadsheet processors
""",
        "Machine Learning": """MCQs for Machine Learning:
1. What is supervised learning?
2. Name a popular ML algorithm.
3. How is training different from testing?""",
        "Large Language Models": """MCQs for LLMs:
1. What does LLM stand for?
2. Name one popular LLM.
3. What is tokenization in LLMs?""",
        "Cloud Computing": """MCQs for Cloud Computing:
1. What is SaaS?
2. Define public cloud vs private cloud.
3. Give examples of cloud service providers."""
    }
    return mcqs.get(topic, f"MCQs for {topic}:\n1. What is {topic}?\n2. Why is it important?\n3. Explain it in detail.")

def evaluate_answer(answer, correct_context):
    return "Score: 8/10\nFeedback: Good attempt. Add more detail."

def save_score(name, topic, score):
    row = {"name": name, "topic": topic, "score": score}
    try:
        df = pd.read_csv("scores.csv")
        df = pd.concat([df, pd.DataFrame([row])], ignore_index=True)
    except:
        df = pd.DataFrame([row])
    df.to_csv("scores.csv", index=False)

def show_progress(name):
    try:
        df = pd.read_csv("scores.csv")
        st.write(f"Progress for {name}:")
        st.bar_chart(df[df['name'] == name].set_index("topic")["score"])
    except:
        st.write("No data available.")

# Streamlit UI
st.title("📘 AI Learning Assistant")

menu = st.sidebar.selectbox("Choose Module", ["Learn", "Practice", "Assessment", "Progress"])

if menu == "Learn":
    topic = st.selectbox("Choose topic:", topics)
    if topic:
        st.subheader("Explanation")
        st.write(generate_explanation(topic))

elif menu == "Practice":
    topic = st.selectbox("Choose topic for MCQs:", topics)
    if topic:
        st.subheader("Generated Questions")
        st.text(generate_mcqs(topic))

elif menu == "Assessment":
    topic = st.selectbox("Select topic:", topics)
    answer = st.text_area("Enter your answer")
    if st.button("Evaluate"):
        feedback = evaluate_answer(answer, f"{topic} full explanation")
        st.write(feedback)
        save_score("Student", topic, 8)

elif menu == "Progress":
    name = st.text_input("Enter your name:")
    if name:
        show_progress(name)
from pyngrok import ngrok

# Authenticate ngrok with your token
!ngrok config add-authtoken 2xtCmTCgn0iGFr3TO9UnGv1EM3s_32ca8cRKntcrLq8vaJbaB
from pyngrok import ngrok
import time

# Kill any previous tunnels
ngrok.kill()

# Start Streamlit in background
!streamlit run app.py &>/content/log.txt &

# Wait a moment to let Streamlit start
time.sleep(5)

# Open the app publicly on port 8501
public_url = ngrok.connect(8501)
print(f"🌍 Streamlit app is live at: {public_url}")
